name: Publish NuGet Package

on:
  workflow_dispatch:
    inputs:
      VERSION:
        required: true
        type: string
        description: "Version to set in the assembly"

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository 📦
        uses: actions/checkout@v5
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}
          fetch-depth: 0

      - name: Set up Git credentials 🪪
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          # Display verbose remote info
          git remote -v

      - name: Update assembly version ✍️
        env:
          CS_PROJ_PATH: ScanBlockPlugin/ScanBlockPlugin.csproj
        run: |
          for tag in AssemblyVersion FileVersion Version; do
            sed -i "s#<$tag>.*</$tag>#<$tag>${{ inputs.VERSION }}</$tag>#" "${{ env.CS_PROJ_PATH }}"
          done
          echo "Verify contents of ${{ env.CS_PROJ_PATH }}"
          cat ${{ env.CS_PROJ_PATH }}

      - name: Setup .NET SDK 🛠️
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: "9.x" # Target of the test project
        
      - name: Restore .NET dependencies 🛬
        run: |
          dotnet --version
          dotnet restore

      - name: Build project 🏗️
        run: dotnet build --no-restore --configuration Release

      - name: Run tests 🧪
        # Also build since build step has configuration Release
        run: dotnet test ScanBlockPlugin.sln --verbosity normal -e SERVICESTACK_LICENSE=${{ secrets.SERVICESTACK_LICENSE }}

      - name: Create NuGet package 📦
        run: dotnet pack --no-build --configuration Release --output ./nupkg
        
      - name: Create tag, commit and push to origin 📋
        env:
          CS_PROJ_PATH: ScanBlockPlugin/ScanBlockPlugin.csproj
          NEW_VERSION: ${{ inputs.VERSION }}
        run: |
          git add ${{ env.CS_PROJ_PATH }}
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          git push origin
          git tag "${{ env.NEW_VERSION }}"
          git push origin "${{ env.NEW_VERSION }}"

      - name: Create a release using GitHub CLI 🎁
        env:
          NEW_VERSION: ${{ inputs.VERSION }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ env.NEW_VERSION }}" --title "${{ env.NEW_VERSION }}" --generate-notes --prerelease=true
          
      - name: Publish NuGet Package 🚀
        run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

      - name: Promote to stable release 🚩
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ inputs.VERSION }}
        run: |
          gh release edit "${{ env.NEW_VERSION }}" --prerelease=false --latest=true
